#!/usr/bin/env bash
#/ Usage: ghe-restore-audit-log
#/ Restore audit logs.
#/
#/ Note: This command typically isn't called directly. It's invoked by
#/ ghe-backup.
set -e

# Bring in the backup configuration
base_path="$( dirname "${BASH_SOURCE[0]}" )"
# shellcheck source=share/github-backup-utils/ghe-backup-config
. "${base_path}/ghe-backup-config"

export_tool="/usr/local/share/enterprise/ghe-export-audit-logs"

# Show usage and bail with no arguments
[ $# -lt 1 ] && print_usage "$@"

GHE_HOSTNAME="$1"

# Setup GHE_REMOTE_XXX variables, snapshot_dir and log
setup(){
  # Perform a host-check and establish GHE_REMOTE_XXX variables.
  ghe_remote_version_required "$GHE_HOSTNAME"

  snapshot_dir="$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT/audit-log-mysql"
  remote_dir="$GHE_REMOTE_DATA_USER_DIR/tmp"
  remote_dump="$remote_dump/month.gz"
  skip_prepare=false

  log=$(mktemp -t ghe-restore-mysql-audit-log-XXXXXX)
  
  ghe-ssh "$GHE_HOSTNAME" -- "sudo mkdir -p '$remote_dir'" >>"$log"

  trap cleanup EXIT
}

# Clean up after exit
cleanup(){
  test -e "$log" || return

  [ -n "$GHE_VERBOSE" ] && cat "$log"
  rm -f "$log"

  ghe-ssh "$GHE_HOSTNAME" -- "sudo rm -rf $remote_dump"
}

# Use $export_tool to fetch the current metadata for all stored
# months in MySQL. For each month: number of entries, minum ID, maximum ID
fetch_current_meta(){
  local meta
  if ! meta=$(ghe-ssh "$GHE_HOSTNAME" "github-env $export_tool months" 2>>"$log"); then
    echo "Error: failed to retrieve audit log metadata" >>"$log"
    return
  fi

  [ -z "$meta" ] && return 1

  echo "$meta"
}

# Read the audt log metadata for all stored months in the current snapshot
fetch_snapshot_meta(){
  local indices
  if ! indices=$(cat "${snapshot_dir}"/*.meta); then
    echo "Snapshot doesn't contain MySQL audit log dumps" >>"$log"
    return 1
  fi

  echo "$indices"
}

# Return metadata of months that need to be restored by
# checking snapshot's metadata vs intances's.
# i.e: metadata doesn't match or doesn't exist in MySQL
# This allows us to do a incremental restore.
notsynced_meta(){
  local snapshot_meta
  if ! snapshot_meta=$(fetch_snapshot_meta); then
    return
  fi

  local current_meta
  if ! current_meta=$(fetch_current_meta); then
    echo "Current instance doesn't have any audit log entries in MySQL" >>"$log"
    skip_prepare=true
    echo "$snapshot_meta"
    return
  fi

  IFS=$'\n'
  for m in $snapshot_meta; do
    if echo "$current_meta" | grep -qx "$m"; then
      echo "$m is in sync" >>"$log"
      continue
    fi

    echo "$m is NOT in sync" >>"$log"
    echo "$m"
  done
  unset IFS
}

# Prepare restore: remove audit entries that match the month to be restored to
# avoid ID collisions
prepare_month_restore(){
  local month=$1
  local meta=$2

  # If table doesn't exist in the first place, we don't need
  # to delete anything
  if $skip_prepare; then
    return
  fi

  if ! ghe-ssh "$GHE_HOSTNAME" "github-env $export_tool prepare_restore $meta" 2>>"$log"; then
    echo "failed to run $export_tool prepare_restore $meta" >>"$log"
  fi
}

# Restore a SQL dump of audit entries
restore_dump(){
  local name=$1

  local dump="$snapshot_dir/${name}.gz"
  if ! test -e "$dump"; then
    echo "snapshot is missing the $dump file" 2>>"$log"
    return 1
  fi

  # Transfer MySQL data from the snapshot to the GitHub instance.
  ghe-ssh "$GHE_HOSTNAME" -- "sudo dd of=$remote_dump 2>&1" >>"$log" 2>&1 <"$dump"

  # Import the entries
  echo "gunzip -cd $remote_dump | sudo $export_tool restore" | ghe-ssh "$GHE_HOSTNAME" -- /bin/bash 2>>"$log"
}

# Restore a month of audit entries
restore_month(){
  local month=$1
  local meta=$2

  prepare_month_restore "$month" "$meta"
  restore_dump "$month"
}

restore_schema(){
  restore_dump schema
}

restore(){
  restore_schema

  IFS=$'\n'
  for month in $(notsynced_meta); do
    local month_name
    month_name=$(echo "$month" | awk '{print $1}')

    restore_month "$month_name" "$month"
  done
  unset IFS
}

main(){
  bm_start "$(basename "$0")"
  setup
  restore
  bm_end "$(basename "$0")"
}

main
