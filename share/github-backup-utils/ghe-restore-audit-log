#!/usr/bin/env bash
#/ Usage: ghe-restore-audit-log
#/ Restore audit logs.
#/
#/ Note: This command typically isn't called directly. It's invoked by
#/ ghe-backup.
set -e

# Bring in the backup configuration
base_path="$( dirname "${BASH_SOURCE[0]}" )"
# shellcheck source=share/github-backup-utils/ghe-backup-config
. "${base_path}/ghe-backup-config"

# Show usage and bail with no arguments
[ $# -lt 1 ] && print_usage "$@"

GHE_HOSTNAME="$1"

# Setup GHE_REMOTE_XXX variables, host and make sure work dir is created
setup(){
  # Perform a host-check and establish GHE_REMOTE_XXX variables.
  ghe_remote_version_required "$GHE_HOSTNAME"
}

# Check whether the snapshot contains audit logs that
# were taken from Elasticsearch
es_data_available(){
  ls -A "$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT/audit-log/*.size" >/dev/null 2>&1
}

# Check whether the snapshot contains audit logs that
# were taken from MySQL
mysql_dump_available(){
  ls -A "$GHE_DATA_DIR/$GHE_RESTORE_SNAPSHOT/audit-log-mysql/20*.gz" >/dev/null 2>&1
}

# Check whether the remote host is running a version where the MySQL backend
# is supported, i.e: < 2.19
is_mysql_supported(){
   [ "$(version $GHE_REMOTE_VERSION)" -lt "$(version 2.19.0)" ]
}

set_remote_flag(){
  local flag=$1
  local msg=$2

  ghe_verbose "$2"
  ghe-ssh "$GHE_HOSTNAME" -- "sudo touch $GHE_REMOTE_ROOT_DIR/data/user/common/audit-log-import/skip" 1>&3 2>&3

  if $CLUSTER; then
    if ! ghe-ssh "$GHE_HOSTNAME" -- "ghe-cluster-each -- sudo touch /data/user/common/audit-log-import/skip" 1>&3 2>&3; then
      ghe_verbose "Failed to $msg in all instances in cluster"
    fi
  fi
}

set_skip_transition_flag(){
  set_remote_flag "skip" "add flag to skip audit log import to MySQL"
}

set_skip_truncate_flag(){
  set_remote_flag "skip_truncate" "add flag to skip truncating audit log table in MySQL"
}

# Use `ghe-backup-mysql-audit-log` to dump the audit entries.
# If the import to MySQL is complete, add a flag in the snapshot to indicate so.
restore_mysql(){
  local only_schema=$1

  ghe_verbose "Restoring MySQL audit logs ..."

  "${base_path}/ghe-restore-mysql-audit-log" "$GHE_HOSTNAME" "$only_schema"
}

# Use ghe-restore-es-audit-log to restore Elasticsearch indices
restore_es(){
  ghe_verbose "Restoring Elasticsearch audit logs ..."

  "${base_path}/ghe-restore-es-audit-log" "$GHE_HOSTNAME"
}

do_restore(){
  if is_mysql_supported; then
    ghe_verbose "Add flag to skip transition to MySQL"
    set_skip_transition_flag
  fi

  # ES data is available, restore it along
  # with the table schema
  if es_data_available; then
    restore_es
    restore_mysql --only-schema
    return
  fi

  # Only MySQL data is available, restore it
  # and trigger a reindex
  if mysql_dump_available; then
    restore_mysql

    if ! is_mysql_supported; then
      ghe_verbose "Add flag to skip MySQL audit log table truncation"
      set_skip_truncate_flag
    fi

    ghe_verbose "Starting audit log reindex from MySQL to Elasticsearch"
    ghe-ssh "$GHE_HOSTNAME" -- "sudo systemctl --no-block restart auditlog-repair";
    return
  fi

  # Only the table schema is available, restore it
  restore_mysql --only-schema
}

main(){
  bm_start "$(basename "$0")"
  setup
  do_restore
  bm_end "$(basename "$0")"
}

main
