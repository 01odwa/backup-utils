#!/usr/bin/env bash
#/ Usage: ghe-host-check [-h] [--version] [<host>]
#/
#/ Verify connectivity with the GitHub Enterprise Server host.
#/
#/ OPTIONS:
#/   -h | --help       Show this message.
#/        --version    Display version information.
#/   <host>            The GitHub Enterprise Server host to check. When no
#/                     <host> is provided, the $GHE_HOSTNAME configured in
#/                     backup.config is assumed.
#/

set -e

while true; do
  case "$1" in
  -h | --help)
    export GHE_SHOW_HELP=true
    shift
    ;;
  --version)
    export GHE_SHOW_VERSION=true
    shift
    ;;
  -*)
    echo "Error: invalid argument: '$1'" 1>&2
    exit 1
    ;;
  *)
    break
    ;;
  esac
done

# Bring in the backup configuration
# shellcheck source=share/github-backup-utils/ghe-backup-config
. "$(dirname "${BASH_SOURCE[0]}")/../share/github-backup-utils/ghe-backup-config"

# Use the host provided on the command line if provided, or fallback on the
# $GHE_HOSTNAME configured in backup.config when not present.
host="${1:-$GHE_HOSTNAME}"

# Options to pass to SSH during connection check
options="
  -o PasswordAuthentication=no
  -o ConnectTimeout=5
  -o ConnectionAttempts=1
"

# Split host:port into parts
port=$(ssh_port_part "$host")
hostname=$(ssh_host_part "$host")

set +e
# ghe-negotiate-version verifies if the target is a GitHub Enterprise Server instance
output=$(echo "ghe-negotiate-version backup-utils $BACKUP_UTILS_VERSION" | ghe-ssh -o BatchMode=no $options $host -- /bin/sh 2>&1)
rc=$?
set -e

if [ $rc -ne 0 ]; then
  case $rc in
  255)
    if echo "$output" | grep -i "port 22: Network is unreachable\|port 22: connection refused\|port 22: no route to host\|ssh_exchange_identification: Connection closed by remote host\|Connection timed out during banner exchange\|port 22: Connection timed out" >/dev/null; then
      exec "$(basename $0)" "$hostname:122"
    fi

    echo "$output" 1>&2
    echo "Error: ssh connection with '$host' failed" 1>&2
    echo "Note that your SSH key needs to be setup on $host as described in:" 1>&2
    echo "* https://enterprise.github.com/help/articles/adding-an-ssh-key-for-shell-access" 1>&2
    ;;
  101)
    echo "Error: couldn't read GitHub Enterprise Server fingerprint on '$host' or this isn't a GitHub appliance." 1>&2
    ;;
  1)
    if [ "${port:-22}" -eq 22 ] && echo "$output" | grep "use port 122" >/dev/null; then
      exec "$(basename $0)" "$hostname:122"
    else
      echo "$output" 1>&2
    fi
    ;;

  esac
  exit $rc
fi

CLUSTER=false
if ghe-ssh "$host" -- \
  "[ -f '$GHE_REMOTE_ROOT_DIR/etc/github/cluster' ]"; then
  CLUSTER=true
fi

# ensure all nodes in the cluster are running the same version
if "$CLUSTER"; then
  node_version_list=$(ghe-ssh "$host" ghe-cluster-each -- ghe-version)
  distinct_versions=$(echo "$node_version_list" | awk '{split($0, a, ":"); print a[2]}' | awk '{print $4}' | uniq | wc -l)
  if [ "$distinct_versions" -ne 1 ]; then
    echo "$node_version_list" 1>&2
    echo "Error: Not all nodes are running the same version! Please ensure all nodes are running the same version before using backup-utils." 1>&2
    exit 1
  fi
fi

version=$(echo "$output" | grep "GitHub Enterprise" | awk '{print $NF}')

if [ -z "$version" ]; then
  echo "Error: failed to parse version on '$host' or this isn't a GitHub appliance." 1>&2
  exit 2
fi

# Block restoring snapshots to older releases of GitHub Enterprise Server
if [ -n "$GHE_RESTORE_SNAPSHOT_PATH" ]; then
  snapshot_version=$(cat $GHE_RESTORE_SNAPSHOT_PATH/version)
  # shellcheck disable=SC2046 # Word splitting is required to populate the variables
  read -r snapshot_version_major snapshot_version_minor _ <<<$(ghe_parse_version $snapshot_version)
  if [ "$(version $GHE_REMOTE_VERSION)" -lt "$(version $snapshot_version_major.$snapshot_version_minor.0)" ]; then
    echo "Error: Snapshot can not be restored to an older release of GitHub Enterprise Server." >&2
    exit 1
  fi
fi

if [ -z "$GHE_ALLOW_REPLICA_BACKUP" ]; then
  if [ "$(ghe-ssh $host -- cat $GHE_REMOTE_ROOT_DIR/etc/github/repl-state 2>/dev/null || true)" = "replica" ]; then
    echo "Error: high availability replica detected." 1>&2
    echo "Backup Utilities should be used to backup from the primary node in" 1>&2
    echo "high availability environments to ensure consistent and reliable backups." 1>&2
    exit 1
  fi
fi

# backup-utils 2.13 onwards limits support to the current and previous two releases
# of GitHub Enterprise Server.
supported_minimum_version="3.5.0"

if [ "$(version $version)" -ge "$(version $supported_minimum_version)" ]; then
  supported=1
fi

if [ -z "$supported" ]; then
  echo "Error: unsupported release of GitHub Enterprise Server detected." 1>&2
  echo "Backup Utilities v$BACKUP_UTILS_VERSION requires GitHub Enterprise Server v$supported_minimum_version or newer." 1>&2
  echo "Please update your GitHub Enterprise Server appliance or use an older version of Backup Utilities." 1>&2
  exit 1
fi

if [[ "$CALLING_SCRIPT" == "ghe-backup" ]]; then
  # Bring in the requirements file
  min_rsync=""
  min_openssh=""
  min_jq=""
  # shellcheck source=share/github-backup-utils/requirements.txt
  . "$(dirname "${BASH_SOURCE[0]}")/../share/github-backup-utils/requirements.txt"

  #source disk size file
  # shellcheck source=share/github-backup-utils/ghe-rsync-size.sh
  . "$(dirname "${BASH_SOURCE[0]}")/../share/github-backup-utils/ghe-rsync-size.sh"

  #Display dir requirements for repositories and mysql
  echo "Checking host for sufficient space for a backup..." 1>&2
  available_space=$(df -B 1k $GHE_DATA_DIR | awk 'END{printf "%.0f", $4 * 1024}') 
  printf "Available space: %d MB. We recommend allocating at least 5x the amount of storage allocated to the primary GitHub appliance for historical snapshots and growth over time.\n" "$((available_space / 1024 ** 2))" 1>&2

  repos_disk_size=$(transfer_size repositories /tmp)
  pages_disk_size=$(transfer_size pages /tmp)
  es_disk_size=$(transfer_size elasticsearch /tmp)
  stor_disk_size=$(transfer_size storage /tmp)
  minio_disk_size=$(transfer_size minio /tmp)
  mysql_disk_size=$(transfer_size mysql /tmp)
  actions_disk_size=$(transfer_size actions /tmp)
  mssql_disk_size=$(transfer_size mssql /tmp)

  #min_disk_req=$(( $(echo "$repos_disk_size" | awk '{printf "%.0f", $1}') + $(echo "$pages_disk_size" | awk '{printf "%.0f", $1}') + $(echo "$es_disk_size" | awk '{printf "%.0f", $1}') + $(echo "$stor_disk_size" | awk '{printf "%.0f", $1}') + $(echo "$minio_disk_size" | awk '{printf "%.0f", $1}') + $(echo "$mysql_disk_size" | awk '{printf "%.0f", $1/2}') + $(echo "$actions_disk_size" | awk '{printf "%.0f", $1}') + $(echo "$mssql_disk_size" | awk '{printf "%.0f", $1}') ))
  min_disk_req=$(( $(echo "$repos_disk_size") + $(echo "$pages_disk_size") + $(echo "$es_disk_size") + $(echo "$stor_disk_size") + $(echo "$minio_disk_size") + $(echo "$mysql_disk_size") + $(echo "$actions_disk_size") + $(echo "$mssql_disk_size") ))
  echo "Data transfer size for - repositories = $repos_disk_size, pages: $pages_disk_size, elasticsearch: $es_disk_size, storage: $stor_disk_size, minio: $minio_disk_size, mysql: $mysql_disk_size, actions: $actions_disk_size, mssql: $mssql_disk_size" 1>&2
  printf "min_disk_required for this backup is at least %d MB\n" "$((min_disk_req / 1024 ** 2))" 1>&2

  if [[ $available_space -lt $min_disk_req ]]; then
    echo "There is not enough disk space for the backup. Please allocate more space and continue." 1>&2
    exit 1
  fi

  #Check rsync, openssh & jq versions
  rsync_version=$(rsync --version | grep 'version' | awk '{print $3}')
  if awk "BEGIN {exit !($rsync_version < $min_rsync)}" &> /dev/null; then
    echo "rsync version $rsync_version in backup-host does not meet minimum requirements." 1>&2
    echo "Please make sure you have the minimum required version of rsync: $min_rsync installed" 1>&2
    exit 1
  fi

  ssh_version=$(ssh -V 2>&1 | awk '{print $1}'|grep -oPm 1 '[\d\.]+' |head -1)
  if awk "BEGIN {exit !($ssh_version < $min_openssh)}" &> /dev/null; then
    echo "openSSH version $ssh_version in backup-host does not meet minimum requirements." 1>&2
    echo "Please make sure the minimum required version of openSSH: $min_openssh is installed" 1>&2
    exit 1
  fi

  jq_version=$(jq --version |awk -F\- '{print $2}')
  if awk "BEGIN {exit !($jq_version < $min_jq)}" &> /dev/null; then
    echo "jq version $jq_version in backup-host does not meet minimum requirements." 1>&2
    echo "Please make sure you have the minimum required version of jq: $min_jq installed" 1>&2
    exit 1
  fi
  echo "Backup host meets minimum software requirements for OpenSSH, rsync and jq." 1>&2
fi

echo "Connect $hostname:$port OK (v$version)"
